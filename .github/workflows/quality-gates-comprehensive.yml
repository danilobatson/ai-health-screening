name: 🛡️ Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Backend Quality Gates
  backend-quality:
    name: 🐍 Backend Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx pytest-mock bandit safety black flake8

      - name: � Run backend tests
        run: |
          pytest --cov=main --cov=ml_services --cov=services --cov-fail-under=90 -v

      - name: 🔒 Security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

  # Frontend Quality Gates
  frontend-quality:
    name: ⚛️ Frontend Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run frontend tests
        run: npm test -- --coverage --watchAll=false

      - name: 🏗️ Build verification
        run: npm run build

  # End-to-End Quality Gates
  e2e-quality:
    name: � E2E Quality
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📦 Install Node dependencies
        working-directory: frontend
        run: npm ci

      - name: 🚀 Start backend server
        run: |
          python main.py &
          sleep 5
        env:
          DATABASE_URL: sqlite:///test.db

      - name: 🌐 Start frontend server
        working-directory: frontend
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000

      - name: 🧪 Run E2E tests
        run: |
          # Test API endpoints
          curl -f http://localhost:8000/health || exit 1

          # Test health assessment endpoint
          curl -f -X POST http://localhost:8000/api/assess-health \
            -H "Content-Type: application/json" \
            -d '{"name":"Test","age":30,"symptoms":"headache","medical_history":"none"}' || exit 1

  # Quality Gates Summary
  quality-gates-summary:
    name: 📊 Quality Summary
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, e2e-quality]
    if: always()
    steps:
      - name: 📋 Check all quality gates
        run: |
          echo "🔍 Quality Gates Summary:"
          echo "Backend: ${{ needs.backend-quality.result }}"
          echo "Frontend: ${{ needs.frontend-quality.result }}"
          echo "E2E: ${{ needs.e2e-quality.result }}"

          if [[ "${{ needs.backend-quality.result }}" == "success" &&
                "${{ needs.frontend-quality.result }}" == "success" &&
                "${{ needs.e2e-quality.result }}" == "success" ]]; then
            echo "✅ All quality gates passed!"
            exit 0
          else
            echo "❌ Some quality gates failed!"
            exit 1
          fi
        run: |
          echo "::group::Security scanning with bandit"
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll || true
          echo "::endgroup::"

      - name: 🔍 Dependency vulnerability scan
        run: |
          echo "::group::Dependency vulnerability scan"
          safety check --json --output safety-report.json || true
          safety check || true
          echo "::endgroup::"

      - name: 🧪 Run tests with coverage
        run: |
          echo "::group::Backend tests with coverage"
          python -m pytest tests/ -v --cov=main --cov=ml_services --cov=services --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=90
          echo "::endgroup::"

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Quality Gates
  frontend-quality:
    name: ⚛️ Frontend Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Code formatting check
        run: |
          echo "::group::Prettier formatting check"
          npx prettier --check .
          echo "::endgroup::"

      - name: 📏 ESLint check
        run: |
          echo "::group::ESLint linting"
          npx eslint . --ext .js,.jsx,.ts,.tsx --format stylish
          echo "::endgroup::"

      - name: 🔨 Build check
        run: |
          echo "::group::Next.js build verification"
          npm run build
          echo "::endgroup::"

      - name: 🧪 Run tests with coverage
        run: |
          echo "::group::Frontend tests with coverage"
          npm run test:coverage
          echo "::endgroup::"

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E Quality Gates
  e2e-quality:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd frontend
          npm ci

      - name: 🎭 Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: 🚀 Start application
        run: |
          cd frontend
          npm run dev &
          sleep 10
          curl -f http://localhost:3000 || (echo "App failed to start" && exit 1)

      - name: 🧪 Run E2E tests
        run: |
          cd frontend
          npx playwright test --reporter=html

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: frontend/playwright-report/
          retention-days: 30

  # Quality Gates Summary
  quality-gates-summary:
    name: ✅ Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, e2e-quality]
    if: always()
    steps:
      - name: 📊 Check all quality gates
        run: |
          echo "::group::Quality Gates Status"
          echo "Backend Quality: ${{ needs.backend-quality.result }}"
          echo "Frontend Quality: ${{ needs.frontend-quality.result }}"
          echo "E2E Quality: ${{ needs.e2e-quality.result }}"
          echo "::endgroup::"

      - name: ❌ Fail if any quality gate failed
        if: ${{ needs.backend-quality.result != 'success' || needs.frontend-quality.result != 'success' || needs.e2e-quality.result != 'success' }}
        run: |
          echo "::error::❌ Quality gates failed! Deployment blocked."
          echo "Backend: ${{ needs.backend-quality.result }}"
          echo "Frontend: ${{ needs.frontend-quality.result }}"
          echo "E2E: ${{ needs.e2e-quality.result }}"
          exit 1

      - name: ✅ All quality gates passed
        if: ${{ needs.backend-quality.result == 'success' && needs.frontend-quality.result == 'success' && needs.e2e-quality.result == 'success' }}
        run: |
          echo "::notice::✅ All quality gates passed! Ready for deployment."
