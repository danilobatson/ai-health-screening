name: Code Quality & Performance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-quality-

      - name: Install Python quality tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint radon

      - name: Install project dependencies
        run: pip install -r requirements.txt

      - name: Check Python code formatting with Black
        run: |
          black --check --diff .

      - name: Check Python import sorting with isort
        run: |
          isort --check-only --diff .

      - name: Run Flake8 linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Pylint
        run: |
          pylint --exit-zero --rcfile=.pylintrc **/*.py

      - name: Calculate code complexity with Radon
        run: |
          radon cc . --show-complexity --min=B
          radon mi . --min=B

      - name: Type checking with MyPy
        run: |
          mypy . --ignore-missing-imports --no-strict-optional

  frontend-quality:
    runs-on: ubuntu-latest
    name: Frontend Code Quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: |
          npm run lint
          npm run lint -- --format=json --output-file=eslint-report.json || true

      - name: Run Prettier check
        working-directory: ./frontend
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Bundle size analysis
        working-directory: ./frontend
        run: |
          npm run build
          npx bundlesize

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports
          path: |
            frontend/eslint-report.json
          retention-days: 30

  performance-test:
    runs-on: ubuntu-latest
    name: Performance Testing

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: health_assessment_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/health_assessment_test" >> $GITHUB_ENV
          echo "GEMINI_API_KEY=test_key" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_testing" >> $GITHUB_ENV

      - name: Start backend server
        run: |
          python main.py &
          sleep 10

      - name: Run API performance tests
        run: |
          # Simple performance test using curl
          echo "Testing API response times..."
          for i in {1..10}; do
            curl -w "@curl-format.txt" -o /dev/null -s "http://localhost:8000/"
          done
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/health_assessment_test

      - name: Create curl format file
        run: |
          cat > curl-format.txt << 'EOF'
          \n
          Response Time: %{time_total}s
          HTTP Status: %{http_code}
          Size: %{size_download} bytes
          \n
          EOF

  accessibility-test:
    runs-on: ubuntu-latest
    name: Accessibility Testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm install -g @axe-core/cli

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm start &
          sleep 10

      - name: Run accessibility tests
        run: |
          axe http://localhost:3000 --reporter spec
