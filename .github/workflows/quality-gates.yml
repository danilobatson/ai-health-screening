name: Quality Gates - Pre-Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# This workflow acts as quality gates for Vercel deployments
# If these checks fail, we prevent bad code from reaching production

jobs:
  quality-gates:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        check: [backend, frontend, security, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Backend Quality Gates
        if: matrix.check == 'backend'
        run: |
          echo "üîç Running Backend Quality Gates..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio bandit safety

          # Run tests with coverage
          python -m pytest tests/ -v --cov=. --cov-fail-under=80

          # Security scan
          bandit -r . -f json -o bandit-report.json || true

          # Dependency vulnerability scan
          safety check --json --output safety-report.json || true

          echo "‚úÖ Backend Quality Gates Passed"

      - name: Frontend Quality Gates
        if: matrix.check == 'frontend'
        run: |
          echo "üîç Running Frontend Quality Gates..."
          cd frontend
          npm ci

          # Run tests with coverage
          npm run test:ci

          # Build check
          npm run build

          # Lint check
          npm run lint

          echo "‚úÖ Frontend Quality Gates Passed"

      - name: Security Quality Gates
        if: matrix.check == 'security'
        run: |
          echo "üîç Running Security Quality Gates..."

          # Check for exposed secrets
          echo "Checking for exposed secrets..."
          if grep -r "sk-" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Potential API keys found!"
            exit 1
          fi

          # Check for hardcoded credentials
          if grep -r "password.*=" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md"; then
            echo "‚ö†Ô∏è  Potential hardcoded credentials found"
          fi

          echo "‚úÖ Security Quality Gates Passed"

      - name: Integration Quality Gates
        if: matrix.check == 'integration'
        run: |
          echo "üîç Running Integration Quality Gates..."

          # Check that all required files exist
          required_files=(
            "main.py"
            "requirements.txt"
            "frontend/package.json"
            "vercel.json"
            "pytest.ini"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done

          echo "‚úÖ Integration Quality Gates Passed"

  deployment-ready:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deployment Ready
        run: |
          echo "üöÄ Quality Gates Passed - Ready for Vercel Deployment"
          echo "Vercel will automatically deploy this commit"
          echo "Monitor deployment at: https://vercel.com/dashboard"

  pr-quality-report:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'pull_request'

    steps:
      - name: PR Quality Report
        run: |
          echo "üìã Pull Request Quality Report"
          echo "‚úÖ All quality gates passed"
          echo "This PR is ready to merge"
          echo "Upon merge, Vercel will automatically deploy"
